/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.C_23_23cknksktzfd;
import org.jooq.mcve.java.Keys;
import org.jooq.mcve.java.tables.records.OtherRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Other extends TableImpl<OtherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>C##CKNKSKTZFD.OTHER</code>
     */
    public static final Other OTHER = new Other();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtherRecord> getRecordType() {
        return OtherRecord.class;
    }

    /**
     * The column <code>C##CKNKSKTZFD.OTHER.ID</code>.
     */
    public final TableField<OtherRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private Other(Name alias, Table<OtherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Other(Name alias, Table<OtherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>C##CKNKSKTZFD.OTHER</code> table reference
     */
    public Other(String alias) {
        this(DSL.name(alias), OTHER);
    }

    /**
     * Create an aliased <code>C##CKNKSKTZFD.OTHER</code> table reference
     */
    public Other(Name alias) {
        this(alias, OTHER);
    }

    /**
     * Create a <code>C##CKNKSKTZFD.OTHER</code> table reference
     */
    public Other() {
        this(DSL.name("OTHER"), null);
    }

    public <O extends Record> Other(Table<O> child, ForeignKey<O, OtherRecord> key) {
        super(child, key, OTHER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : C_23_23cknksktzfd.C_23_23CKNKSKTZFD;
    }

    @Override
    public UniqueKey<OtherRecord> getPrimaryKey() {
        return Keys.SYS_C0016788;
    }

    @Override
    public Other as(String alias) {
        return new Other(DSL.name(alias), this);
    }

    @Override
    public Other as(Name alias) {
        return new Other(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Other rename(String name) {
        return new Other(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Other rename(Name name) {
        return new Other(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
