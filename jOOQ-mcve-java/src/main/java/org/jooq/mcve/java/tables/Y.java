/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.C_23_23cknksktzfd;
import org.jooq.mcve.java.Keys;
import org.jooq.mcve.java.tables.records.YRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Y extends TableImpl<YRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>C##CKNKSKTZFD.Y</code>
     */
    public static final Y Y = new Y();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YRecord> getRecordType() {
        return YRecord.class;
    }

    /**
     * The column <code>C##CKNKSKTZFD.Y.ID</code>.
     */
    public final TableField<YRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>C##CKNKSKTZFD.Y.VALUE</code>.
     */
    public final TableField<YRecord, Long> VALUE = createField(DSL.name("VALUE"), SQLDataType.BIGINT, this, "");

    private Y(Name alias, Table<YRecord> aliased) {
        this(alias, aliased, null);
    }

    private Y(Name alias, Table<YRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>C##CKNKSKTZFD.Y</code> table reference
     */
    public Y(String alias) {
        this(DSL.name(alias), Y);
    }

    /**
     * Create an aliased <code>C##CKNKSKTZFD.Y</code> table reference
     */
    public Y(Name alias) {
        this(alias, Y);
    }

    /**
     * Create a <code>C##CKNKSKTZFD.Y</code> table reference
     */
    public Y() {
        this(DSL.name("Y"), null);
    }

    public <O extends Record> Y(Table<O> child, ForeignKey<O, YRecord> key) {
        super(child, key, Y);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : C_23_23cknksktzfd.C_23_23CKNKSKTZFD;
    }

    @Override
    public UniqueKey<YRecord> getPrimaryKey() {
        return Keys.SYS_C0016787;
    }

    @Override
    public Y as(String alias) {
        return new Y(DSL.name(alias), this);
    }

    @Override
    public Y as(Name alias) {
        return new Y(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Y rename(String name) {
        return new Y(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Y rename(Name name) {
        return new Y(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
