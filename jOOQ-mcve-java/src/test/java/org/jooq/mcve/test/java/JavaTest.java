package org.jooq.mcve.test.java;

import org.jooq.DSLContext;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.tables.records.YRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.util.List;

import static org.jooq.mcve.java.Tables.Y;
import static org.jooq.mcve.java.Tables.X;
import static org.junit.Assert.assertEquals;

public class JavaTest {

    public Connection connection;
    public DSLContext ctx;

    @Before
    public void setup() throws Exception {
        connection = DriverManager.getConnection("jdbc:oracle:thin:@xxxxxxxxx", "xxxxxxxxx", "xxxxxxxx");
        ctx = DSL.using(connection);
    }

    @After
    public void after() throws Exception {
        ctx = null;
        connection.close();
        connection = null;
    }

    @Test
    public void mcveTest() {
        YRecord wrong = ctx
			.select()
			.from(X)
			.join(Y)
			.on(Y.ID.eq(X.ID))
			.leftSemiJoin(DSL.table(DSL.name("OTHER")))
			.on(DSL.field(DSL.name("OTHER", "ID"), Long.class).eq(Y.VALUE))
			.fetchOne()
			.into(Y);
			
		YRecord right = ctx
			.select()
			.from(X)
			.join(Y)
			.on(Y.ID.eq(X.ID))
			.where(DSL.exists(DSL.select(DSL.one()).from(DSL.table(DSL.name("OTHER"))).where(DSL.field(DSL.name("OTHER", "ID"), Long.class).eq(Y.VALUE))))
			.fetchOne()
			.into(Y);
			
		System.out.println(wrong);
		System.out.println(right);
		assertEquals(right, wrong);
    }
}
